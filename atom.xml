<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yoler的小站</title>
  <subtitle>你说向前看 毕竟将来重要</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-06-23T05:24:12.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yoler|雷永亮</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>对象浅拷贝和深拷贝总结</title>
    <link href="http://yoursite.com/2017/06/23/%E5%AF%B9%E8%B1%A1%E6%B7%B1%E6%8B%B7%E8%B4%9D%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/06/23/对象深拷贝总结/</id>
    <published>2017-06-23T03:09:20.000Z</published>
    <updated>2017-06-23T05:24:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="javaScript的变量类型"><a href="#javaScript的变量类型" class="headerlink" title="javaScript的变量类型"></a>javaScript的变量类型</h2><h4 id="1-基本类型："><a href="#1-基本类型：" class="headerlink" title="1. 基本类型："></a>1. 基本类型：</h4><p>5种基本数据类型Undefined、Null、Boolean、Number 和 String，变量是直接按值存放的，存放在栈内存中的简单数据段，可以直接访问。<br>这些类型的值本身就存储在栈内存中(string类型的实际值还是存储在堆内存中的，但是js把string当做基本类型来处理 )，不存在引用值的情况。</p>
<h4 id="2-引用类型："><a href="#2-引用类型：" class="headerlink" title="2. 引用类型："></a>2. 引用类型：</h4><p>存放在堆内存中的对象，变量保存的是一个指针，这个指针指向另一个位置。当需要访问引用类型（如对象，数组等）的值时，首先从栈中获得该对象的地址指针，然后再从堆内存中取得所需的数据。</p>
<h2 id="浅拷贝和深拷贝"><a href="#浅拷贝和深拷贝" class="headerlink" title="浅拷贝和深拷贝"></a>浅拷贝和深拷贝</h2><p><strong>浅拷贝：</strong>浅拷贝是复制引用，复制后的引用都是指向同一个对象的实例，彼此之间的操作会互相影响</p>
<p><strong>深拷贝：</strong>深拷贝不是简单的复制引用，而是在堆中重新分配内存，并且把源对象实例的所有属性都进行新建复制，以保证深拷贝的对象的引用图不包含任何原有对象或对象图上的任何对象，复制后的对象与原来的对象是完全隔离的</p>
<p>深拷贝和浅拷贝只针对像 <strong>Object</strong>, <strong>Array</strong> 这样的复杂对象的。<br>简单来说，浅拷贝只复制一层对象的属性，而深拷贝则递归复制了所有层级。</p>
<p>JavaScript存储对象都是存地址的，所以浅拷贝会导致两个对象指向同一块内存地址。改变了其中一方的内容，都是在原来的内存上做修改会导致拷贝对象和源对象都发生改变，而深拷贝是开辟一块新的内存地址，将原对象的各个属性逐个复制进去。对拷贝对象和源对象各自的操作互不影响。</p>
<h3 id="浅拷贝的实现"><a href="#浅拷贝的实现" class="headerlink" title="浅拷贝的实现"></a>浅拷贝的实现</h3><pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">function</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span>copyObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> i <span class="token keyword">in</span> copyObj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        obj<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> copyObj<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">{</span>
    a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>
    b<span class="token punctuation">:</span> <span class="token punctuation">{</span> f<span class="token punctuation">:</span> <span class="token punctuation">{</span> g<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
    c<span class="token punctuation">:</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token function">shallowClone</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f <span class="token operator">===</span> x<span class="token punctuation">.</span>b<span class="token punctuation">.</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// true</span>
</code></pre>
<h3 id="深拷贝的实现"><a href="#深拷贝的实现" class="headerlink" title="深拷贝的实现"></a>深拷贝的实现</h3><h4 id="1-Array的slice和concat方法"><a href="#1-Array的slice和concat方法" class="headerlink" title="1. Array的slice和concat方法"></a>1. Array的slice和concat方法</h4><p>Array的slice和concat方法不修改原数组，只会返回一个浅拷贝了原数组中的元素的一个新数组。之所以把它放在深拷贝里，是因为它看起来像是深拷贝。而实际上它是浅拷贝。原数组的元素会按照下述规则拷贝：<br>如果该元素是个对象引用 （不是实际的对象），slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。<br>对于字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。<br>如果向两个数组任一中添加了新元素，则另一个不会受到影响。例子如下：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> array_shallow <span class="token operator">=</span> array<span class="token punctuation">;</span> 
<span class="token keyword">var</span> array_concat <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> array_slice <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array <span class="token operator">===</span> array_shallow<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//true </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array <span class="token operator">===</span> array_slice<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false，“看起来”像深拷贝</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array <span class="token operator">===</span> array_concat<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//false，“看起来”像深拷贝</span>
</code></pre>
<p>可以看出，concat和slice返回的不同的数组实例，这与直接的引用复制是不同的。而从另一个例子可以看出Array的concat和slice并不是真正的深拷贝，数组中的对象元素(Object,Array等)只是复制了引用。如下：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"array"</span><span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 
<span class="token keyword">var</span> array_concat <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> array_slice <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
array_concat<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//改变array_concat中数组元素的值 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[5,2,3] </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array_slice<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//[5,2,3] </span>
array_slice<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"array_slice"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//改变array_slice中对象元素的值 </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//array_slice</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array_concat<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//array_slice</span>
</code></pre>
<h4 id="2-JSON对象的parse和stringify"><a href="#2-JSON对象的parse和stringify" class="headerlink" title="2. JSON对象的parse和stringify"></a>2. JSON对象的parse和stringify</h4><p>JSON对象是ES5中引入的新的类型（支持的浏览器为IE8+），JSON对象parse方法可以将JSON字符串反序列化成JS对象，stringify方法可以将JS对象序列化成JSON字符串，借助这两个方法，也可以实现对象的深拷贝。</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">//例1</span>
<span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">"source"</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">"child"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> 
<span class="token keyword">var</span> target <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
target<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"target"</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//改变target的name属性</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//source </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//target</span>
target<span class="token punctuation">.</span>child<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"target child"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//改变target的child </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>source<span class="token punctuation">.</span>child<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//child </span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>child<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//target child</span>
<span class="token comment" spellcheck="true">//例2</span>
<span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span><span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token string">"child"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> 
<span class="token keyword">var</span> target <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>
<span class="token comment" spellcheck="true">//例3</span>
<span class="token keyword">var</span> source <span class="token operator">=</span> <span class="token punctuation">{</span> name<span class="token punctuation">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> child<span class="token punctuation">:</span><span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span>
<span class="token keyword">var</span> target <span class="token operator">=</span> JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>child<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//Object {}</span>
</code></pre>
<p>这种方法使用较为简单，可以满足基本的深拷贝需求，而且能够处理JSON格式能表示的所有数据类型，但是对于正则表达式类型、函数类型等无法进行深拷贝(而且会直接丢失相应的值)。还有一点不好的地方是它会抛弃对象的constructor。也就是深拷贝之后，不管这个对象原来的构造函数是什么，在深拷贝之后都会变成Object。同时如果对象中存在循环引用的情况也无法正确处理。</p>
<h4 id="3-jQuery-extend-方法实现"><a href="#3-jQuery-extend-方法实现" class="headerlink" title="3.jQuery.extend()方法实现"></a>3.jQuery.extend()方法实现</h4><pre class=" language-javascript"><code class="language-javascript">jQuery<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a <span class="token punctuation">:</span> <span class="token punctuation">{</span> a <span class="token punctuation">:</span> <span class="token string">"a"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a <span class="token punctuation">:</span> <span class="token punctuation">{</span> b <span class="token punctuation">:</span> <span class="token string">"b"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
jQuery<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span> <span class="token punctuation">{</span> a <span class="token punctuation">:</span> <span class="token punctuation">{</span> a <span class="token punctuation">:</span> <span class="token string">"a"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> a <span class="token punctuation">:</span> <span class="token punctuation">{</span> b <span class="token punctuation">:</span> <span class="token string">"b"</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>jQuery.extend第一个参数可以是布尔值，用来设置是否深度拷贝的<br>源码及分析如下：</p>
<pre class=" language-javascript"><code class="language-javascript">jQuery<span class="token punctuation">.</span>extend <span class="token operator">=</span> jQuery<span class="token punctuation">.</span>fn<span class="token punctuation">.</span>extend <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//给jQuery对象和jQuery原型对象都添加了extend扩展方法</span>
  <span class="token keyword">var</span> options<span class="token punctuation">,</span> name<span class="token punctuation">,</span> src<span class="token punctuation">,</span> copy<span class="token punctuation">,</span> copyIsArray<span class="token punctuation">,</span> clone<span class="token punctuation">,</span> target <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
  i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>
  length <span class="token operator">=</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">,</span>
  deep <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
  <span class="token comment" spellcheck="true">//以上其中的变量：options是一个缓存变量，用来缓存arguments[i]，name是用来接收将要被扩展对象的key，src改变之前target对象上每个key对应的value。</span>
  <span class="token comment" spellcheck="true">//copy传入对象上每个key对应的value，copyIsArray判定copy是否为一个数组，clone深拷贝中用来临时存对象或数组的src。</span>

  <span class="token comment" spellcheck="true">// 处理深拷贝的情况</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">===</span> <span class="token string">"boolean"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    deep <span class="token operator">=</span> target<span class="token punctuation">;</span>
    target <span class="token operator">=</span> arguments<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token comment" spellcheck="true">//跳过布尔值和目标 </span>
    i<span class="token operator">++</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 控制当target不是object或者function的情况</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> target <span class="token operator">!==</span> <span class="token string">"object"</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>jQuery<span class="token punctuation">.</span><span class="token function">isFunction</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    target <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token comment" spellcheck="true">// 当参数列表长度等于i的时候，扩展jQuery对象自身。</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>length <span class="token operator">===</span> i<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    target <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>options <span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment" spellcheck="true">// 扩展基础对象</span>
      <span class="token keyword">for</span> <span class="token punctuation">(</span>name <span class="token keyword">in</span> options<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        src <span class="token operator">=</span> target<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>    
        copy <span class="token operator">=</span> options<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token comment" spellcheck="true">// 防止永无止境的循环，这里举个例子，如var i = {};i.a = i;$.extend(true,{},i);如果没有这个判断变成死循环了</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">===</span> copy<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>deep <span class="token operator">&amp;&amp;</span> copy <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>jQuery<span class="token punctuation">.</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>copyIsArray <span class="token operator">=</span> jQuery<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>copy<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>copyIsArray<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            copyIsArray <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>
            clone <span class="token operator">=</span> src <span class="token operator">&amp;&amp;</span> jQuery<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">?</span> src<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果src存在且是数组的话就让clone副本等于src否则等于空数组。</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            clone <span class="token operator">=</span> src <span class="token operator">&amp;&amp;</span> jQuery<span class="token punctuation">.</span><span class="token function">isPlainObject</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span> <span class="token operator">?</span> src<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 如果src存在且是对象的话就让clone副本等于src否则等于空数组。</span>
          <span class="token punctuation">}</span>
          <span class="token comment" spellcheck="true">// 递归拷贝</span>
          target<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> jQuery<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span>deep<span class="token punctuation">,</span> clone<span class="token punctuation">,</span> copy<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>copy <span class="token operator">!==</span> undefined<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          target<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> copy<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 若原对象存在name属性，则直接覆盖掉；若不存在，则创建新的属性。</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
  <span class="token comment" spellcheck="true">// 返回修改的对象</span>
  <span class="token keyword">return</span> target<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>jQuery的extend方法使用基本的递归思路实现了浅拷贝和深拷贝，但是这个方法也无法处理源对象内部循环引用，例如：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"aaa"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"name"</span><span class="token punctuation">:</span><span class="token string">"bbb"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
a<span class="token punctuation">.</span>child <span class="token operator">=</span> b<span class="token punctuation">;</span>
b<span class="token punctuation">.</span>parent <span class="token operator">=</span> a<span class="token punctuation">;</span>
$<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//直接报了栈溢出。Uncaught RangeError: Maximum call stack size exceeded</span>
</code></pre>
<h4 id="4-自己动手实现一个拷贝方法"><a href="#4-自己动手实现一个拷贝方法" class="headerlink" title="4.自己动手实现一个拷贝方法"></a>4.自己动手实现一个拷贝方法</h4><pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> $ <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token keyword">var</span> types <span class="token operator">=</span> <span class="token string">'Array Object String Date RegExp Function Boolean Number Null Undefined'</span><span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">function</span> <span class="token function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>toString<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> types<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
     $<span class="token punctuation">[</span><span class="token string">'is'</span> <span class="token operator">+</span> types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>
           <span class="token keyword">return</span> type<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token operator">===</span> self<span class="token punctuation">;</span>
        <span class="token punctuation">}</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>types<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token keyword">return</span> $<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//类型判断</span>

<span class="token keyword">function</span> <span class="token function">copy</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span>deep<span class="token punctuation">)</span><span class="token punctuation">{</span> 
  <span class="token keyword">if</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> obj <span class="token operator">!==</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">{</span> 
     <span class="token keyword">return</span> obj<span class="token punctuation">;</span> 
  <span class="token punctuation">}</span> 　　　　　
  <span class="token keyword">var</span> name<span class="token punctuation">,</span> target <span class="token operator">=</span> $<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> value<span class="token punctuation">;</span> 
  <span class="token keyword">for</span><span class="token punctuation">(</span>name <span class="token keyword">in</span> obj<span class="token punctuation">)</span><span class="token punctuation">{</span> 
     value <span class="token operator">=</span> obj<span class="token punctuation">[</span>name<span class="token punctuation">]</span><span class="token punctuation">;</span> 
     <span class="token keyword">if</span><span class="token punctuation">(</span>value <span class="token operator">===</span> obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">continue</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span>deep <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>$<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token operator">||</span> $<span class="token punctuation">.</span><span class="token function">isObject</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
       target<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>deep<span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>
       target<span class="token punctuation">[</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
     <span class="token punctuation">}</span> 
  <span class="token punctuation">}</span> 
  <span class="token keyword">return</span> target<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h4 id="5-对于任何对象，它可能的类型有Boolean-Number-Date-String-RegExp-Array-以及-Object（所有自定义的对象全都继承于Object）实现深拷贝"><a href="#5-对于任何对象，它可能的类型有Boolean-Number-Date-String-RegExp-Array-以及-Object（所有自定义的对象全都继承于Object）实现深拷贝" class="headerlink" title="5.对于任何对象，它可能的类型有Boolean, Number, Date, String, RegExp, Array 以及 Object（所有自定义的对象全都继承于Object）实现深拷贝"></a>5.对于任何对象，它可能的类型有Boolean, Number, Date, String, RegExp, Array 以及 Object（所有自定义的对象全都继承于Object）实现深拷贝</h4><pre class=" language-javascript"><code class="language-javascript">Object<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> Constructor <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>constructor<span class="token punctuation">;</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> attr <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>attr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token string">"function"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    obj<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
                <span class="token keyword">else</span> <span class="token punctuation">{</span>
                    obj<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> obj<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>定义在Object.prototype上的clone()函数是整个方法的核心，对于任意一个非js预定义的对象，都会调用这个函数。而对于所有js预定义的对象，如Number,Array等，我们就要实现一个辅助clone()函数来实现完整的克隆过程：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">/* Method of Array */</span>
Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> thisArr <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> newArr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>thisArr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        newArr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>thisArr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> newArr<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/* Method of Boolean, Number, String*/</span>
Boolean<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
Number<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/* Method of Date*/</span>
Date<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment" spellcheck="true">/* Method of RegExp*/</span>
RegExp<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>clone <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> pattern <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> flags <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>
    flags <span class="token operator">+</span><span class="token operator">=</span> pattern<span class="token punctuation">.</span>global <span class="token operator">?</span> <span class="token string">'g'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
    flags <span class="token operator">+</span><span class="token operator">=</span> pattern<span class="token punctuation">.</span>ignoreCase <span class="token operator">?</span> <span class="token string">'i'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
    flags <span class="token operator">+</span><span class="token operator">=</span> pattern<span class="token punctuation">.</span>multiline <span class="token operator">?</span> <span class="token string">'m'</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">RegExp</span><span class="token punctuation">(</span>pattern<span class="token punctuation">.</span>source<span class="token punctuation">,</span> flags<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;javaScript的变量类型&quot;&gt;&lt;a href=&quot;#javaScript的变量类型&quot; class=&quot;headerlink&quot; title=&quot;javaScript的变量类型&quot;&gt;&lt;/a&gt;javaScript的变量类型&lt;/h2&gt;&lt;h4 id=&quot;1-基本类型：&quot;&gt;&lt;a h
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>数组去重总结</title>
    <link href="http://yoursite.com/2017/06/15/%E6%95%B0%E7%BB%84%E5%8E%BB%E9%87%8D%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/06/15/数组去重总结/</id>
    <published>2017-06-15T07:28:57.000Z</published>
    <updated>2017-06-23T03:08:01.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h4><p>使用filter高阶函数</p>
<pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> brr <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">==</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>brr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[ 12, 14, 15, 13, 1, 3, 5, 6 ]</span>
</code></pre>
<h4 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h4><p>使用对象的键唯一原理</p>
<pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">let</span> dic <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token keyword">let</span> newarr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>item<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dic<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            dic<span class="token punctuation">[</span>item<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
            newarr<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>brr<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">//[ 12, 14, 15, 13, 1, 3, 5, 6 ]</span>
</code></pre>
<h4 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h4><p>使用es6 Set对象</p>
<pre class=" language-javascript"><code class="language-javascript">    <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>
    <span class="token keyword">let</span> sarr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>sarr<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">//Set { 12, 14, 15, 13, 1, 3, 5, 6 }</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;方法一&quot;&gt;&lt;a href=&quot;#方法一&quot; class=&quot;headerlink&quot; title=&quot;方法一&quot;&gt;&lt;/a&gt;方法一&lt;/h4&gt;&lt;p&gt;使用filter高阶函数&lt;/p&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;&lt;code class=&quot;la
    
    </summary>
    
      <category term="技术" scheme="http://yoursite.com/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>摄影笔记</title>
    <link href="http://yoursite.com/2017/06/11/%E6%91%84%E5%BD%B1%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2017/06/11/摄影笔记/</id>
    <published>2017-06-11T06:36:12.000Z</published>
    <updated>2017-06-15T06:25:03.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="生活不止眼前的苟且-还有诗和远方"><a href="#生活不止眼前的苟且-还有诗和远方" class="headerlink" title="生活不止眼前的苟且 还有诗和远方"></a>生活不止眼前的苟且 还有诗和远方</h2><p><img src="/img/yf.JPG" alt="远方"></p>
<p>向往 做一个纯粹的人 喜欢什么就去做 并把它做好</p>
<h3 id="关于摄影"><a href="#关于摄影" class="headerlink" title="关于摄影"></a>关于摄影</h3><p>安塞尔 亚当斯(Ansel Adams)说过：“我们不止是用相机拍照，我们带到摄影中去的是所有我们读过的书，看过的电影，听过的音乐，爱过的人。”</p>
<p><img src="/img/sunf.JPG" alt="远方"></p>
<h3 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h3><p>处在一个快节奏的城市，每天奔走在来来往往熙熙攘攘的人群中，都在努力地追求我们各自想要的，却忘记了生活。有时候也应当做一次猫先生，感受生活，享受阳光。</p>
<p><img src="/img/DSC_1491.JPG" alt="猫"></p>
<p><img src="/img/DSC_1495.JPG" alt="猫"></p>
<p><img src="/img/DSC_1517.JPG" alt="猫"></p>
<p>偶尔也做一下二哈，自娱自乐，岂不开心</p>
<p><img src="/img/DSC_1505.JPG" alt="狗"></p>
<p><img src="/img/DSC_1521.JPG" alt="狗"></p>
<p>假装很忧伤</p>
<p><img src="/img/DSC_1498.JPG" alt="狗"></p>
<p>通过镜头去看平时看不到的细节，记录感动与心动的瞬间，留下一张会讲故事的照片，这可能就是摄影的意义吧</p>
<p><img src="/img/DSC_0052.JPG" alt="狗"></p>
<p><img src="/img/DSC_0238.JPG" alt="狗"></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;生活不止眼前的苟且-还有诗和远方&quot;&gt;&lt;a href=&quot;#生活不止眼前的苟且-还有诗和远方&quot; class=&quot;headerlink&quot; title=&quot;生活不止眼前的苟且 还有诗和远方&quot;&gt;&lt;/a&gt;生活不止眼前的苟且 还有诗和远方&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/img
    
    </summary>
    
      <category term="生活" scheme="http://yoursite.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="摄影" scheme="http://yoursite.com/tags/%E6%91%84%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>文件下载</title>
    <link href="http://yoursite.com/2017/05/22/File-DownLoad/"/>
    <id>http://yoursite.com/2017/05/22/File-DownLoad/</id>
    <published>2017-05-22T01:52:34.000Z</published>
    <updated>2017-06-09T09:51:17.000Z</updated>
    
    <content type="html"><![CDATA[<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onclick</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>download(<span class="token punctuation">'</span>11.txt<span class="token punctuation">'</span>, <span class="token punctuation">'</span>fsdfdsfsdfsdfsdfsdfsf<span class="token punctuation">'</span>)<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>下载<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">download</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> content<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> aLink <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> blob <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Blob</span><span class="token punctuation">(</span><span class="token punctuation">[</span>content<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">var</span> event <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MouseEvent</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
      <span class="token string">'view'</span><span class="token punctuation">:</span> window<span class="token punctuation">,</span>
      <span class="token string">'bubbles'</span><span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//是否冒泡</span>
      <span class="token string">'cancelable'</span><span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//事件是否可以取消</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    aLink<span class="token punctuation">.</span>download <span class="token operator">=</span> filename
    aLink<span class="token punctuation">.</span>href <span class="token operator">=</span> URL<span class="token punctuation">.</span><span class="token function">createObjectURL</span><span class="token punctuation">(</span>blob<span class="token punctuation">)</span>
    aLink<span class="token punctuation">.</span><span class="token function">dispatchEvent</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;pre class=&quot; language-html&quot;&gt;&lt;code class=&quot;language-html&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token tag&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;lt;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>vue-webpack配置文件</title>
    <link href="http://yoursite.com/2017/03/20/vue-webpack%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/03/20/vue-webpack配置文件/</id>
    <published>2017-03-20T01:24:49.000Z</published>
    <updated>2017-06-09T09:58:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天来总结一下自己搭建vue开发环境的一些心得，其实最重要的就是webpack的配置，下面直接贴出配置代码：</p>
<pre class=" language-javascript"><code class="language-javascript"><span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
    entry<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        app<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./main.js"</span><span class="token punctuation">)</span>
        <span class="token comment" spellcheck="true">// entry:顾名思义入口文件,app/main.js,输入名字为 app.js</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    output<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        path<span class="token punctuation">:</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">"./build"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token comment" spellcheck="true">//输出路径</span>
        publicPath<span class="token punctuation">:</span> <span class="token string">'build/'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//调试或者 CDN 之类的域名,稍候会用到</span>
        filename<span class="token punctuation">:</span> <span class="token string">"[name].js"</span> <span class="token comment" spellcheck="true">//配置生成的文件名</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    resolve<span class="token punctuation">:</span> <span class="token punctuation">{</span>
       <span class="token comment" spellcheck="true">// require时省略的扩展名，如：require('module') 不需要module.js</span>
       extensions<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">,</span> <span class="token string">'.js'</span><span class="token punctuation">,</span> <span class="token string">'.vue'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
   <span class="token punctuation">}</span><span class="token punctuation">,</span>
    module<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        loaders<span class="token punctuation">:</span> <span class="token punctuation">[</span>
            <span class="token punctuation">{</span>
                test<span class="token punctuation">:</span> <span class="token regex">/\.vue$/</span><span class="token punctuation">,</span>
                loader<span class="token punctuation">:</span> <span class="token string">'vue'</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>   test<span class="token punctuation">:</span> <span class="token regex">/\.css?$/</span><span class="token punctuation">,</span>
                loader<span class="token punctuation">:</span> <span class="token string">'file'</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                test<span class="token punctuation">:</span> <span class="token regex">/\.js$/</span><span class="token punctuation">,</span>
                loader<span class="token punctuation">:</span> <span class="token string">'babel'</span><span class="token punctuation">,</span>
                exclude<span class="token punctuation">:</span> <span class="token regex">/node_modules/</span>

            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token punctuation">{</span>
                test<span class="token punctuation">:</span> <span class="token regex">/\.(png|js?eg|gif|svg|woff2?|eot|ttf)(\?.*)?$/</span><span class="token punctuation">,</span>
                loader<span class="token punctuation">:</span> <span class="token string">'url'</span><span class="token punctuation">,</span>

            <span class="token punctuation">}</span>

        <span class="token punctuation">]</span><span class="token comment" spellcheck="true">//模块加载器，默认null</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    babel<span class="token punctuation">:</span> <span class="token punctuation">{</span>
        presets<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'es2015'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
        plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token string">'transform-runtime'</span><span class="token punctuation">]</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    plugins<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true">//插件，默认null</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>以及package.json文件：</p>
<pre class=" language-json"><code class="language-json"><span class="token punctuation">{</span>
  <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"h5app"</span><span class="token punctuation">,</span>
  <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"1.0.0"</span><span class="token punctuation">,</span>
  <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>
  <span class="token property">"main"</span><span class="token operator">:</span> <span class="token string">"index.js"</span><span class="token punctuation">,</span>
  <span class="token property">"scripts"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"test"</span><span class="token operator">:</span> <span class="token string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token property">"author"</span><span class="token operator">:</span> <span class="token string">"yoler"</span><span class="token punctuation">,</span>
  <span class="token property">"license"</span><span class="token operator">:</span> <span class="token string">"ISC"</span><span class="token punctuation">,</span>
  <span class="token property">"devDependencies"</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token property">"babel-core"</span><span class="token operator">:</span> <span class="token string">"^6.22.1"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-loader"</span><span class="token operator">:</span> <span class="token string">"^6.2.10"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-plugin-istanbul"</span><span class="token operator">:</span> <span class="token string">"^3.1.2"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-plugin-transform-runtime"</span><span class="token operator">:</span> <span class="token string">"^6.22.0"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-preset-es2015"</span><span class="token operator">:</span> <span class="token string">"^6.22.0"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-preset-stage-2"</span><span class="token operator">:</span> <span class="token string">"^6.22.0"</span><span class="token punctuation">,</span>
    <span class="token property">"babel-register"</span><span class="token operator">:</span> <span class="token string">"^6.22.0"</span><span class="token punctuation">,</span>
    <span class="token property">"css-loader"</span><span class="token operator">:</span> <span class="token string">"^0.26.4"</span><span class="token punctuation">,</span>
    <span class="token property">"element-ui"</span><span class="token operator">:</span> <span class="token string">"^1.2.4"</span><span class="token punctuation">,</span>
    <span class="token property">"file-loader"</span><span class="token operator">:</span> <span class="token string">"^0.10.1"</span><span class="token punctuation">,</span>
    <span class="token property">"url-loader"</span><span class="token operator">:</span> <span class="token string">"^0.5.8"</span><span class="token punctuation">,</span>
    <span class="token property">"vue"</span><span class="token operator">:</span> <span class="token string">"^2.2.2"</span><span class="token punctuation">,</span>
    <span class="token property">"vue-loader"</span><span class="token operator">:</span> <span class="token string">"^11.1.4"</span><span class="token punctuation">,</span>
    <span class="token property">"vue-resource"</span><span class="token operator">:</span> <span class="token string">"^1.2.1"</span><span class="token punctuation">,</span>
    <span class="token property">"vue-router"</span><span class="token operator">:</span> <span class="token string">"^2.3.0"</span><span class="token punctuation">,</span>
    <span class="token property">"vue-style-loader"</span><span class="token operator">:</span> <span class="token string">"^2.0.0"</span><span class="token punctuation">,</span>
    <span class="token property">"vue-template-compiler"</span><span class="token operator">:</span> <span class="token string">"^2.2.2"</span><span class="token punctuation">,</span>
    <span class="token property">"vuex"</span><span class="token operator">:</span> <span class="token string">"^2.2.1"</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天来总结一下自己搭建vue开发环境的一些心得，其实最重要的就是webpack的配置，下面直接贴出配置代码：&lt;/p&gt;
&lt;pre class=&quot; language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;&lt;span clas
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>模拟滚动条</title>
    <link href="http://yoursite.com/2017/02/28/%E6%A8%A1%E6%8B%9F%E6%BB%9A%E5%8A%A8%E6%9D%A1/"/>
    <id>http://yoursite.com/2017/02/28/模拟滚动条/</id>
    <published>2017-02-28T09:49:19.000Z</published>
    <updated>2017-06-09T10:00:34.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近由于需求原因，用vue做开发，自己动手模拟原生滚动条,做过之后觉得也没有那么难<br>点击观看<a href="http://leiyongliang.github.io/scroll" target="_blank" rel="external">Demo</a></p>
<p>下面直接贴出部分核心代码</p>
<pre class=" language-javascript"><code class="language-javascript">   initscrollbar <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>scroll_box<span class="token punctuation">.</span>offsetHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>page_content<span class="token punctuation">.</span>offsetHeight <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>rate <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>scroll_box<span class="token punctuation">.</span>offsetHeight <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>page_content<span class="token punctuation">.</span>offsetHeight
        <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_bar_height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rate <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>scroll_box<span class="token punctuation">.</span>offsetHeight <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token string">'px'</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_bar_top <span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rate <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'px'</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>scroll_box<span class="token punctuation">.</span>offsetHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>page_content<span class="token punctuation">.</span>offsetHeight <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>scroll_box<span class="token punctuation">.</span>offsetHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>page_content<span class="token punctuation">.</span>offsetHeight
          <span class="token keyword">this</span><span class="token punctuation">.</span>page_content_top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">+</span> <span class="token string">'px'</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_bar_top <span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rate <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'px'</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>page_content_top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">+</span> <span class="token string">'px'</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_bar_height <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>这一段代码是初始化滚动条的高度和位置，当窗口大小发生改变的时候通过容器高度和内容高度来计算出新的比率rate，再通过这个rate初始化滚动条的高度</p>
<pre class=" language-javascript"><code class="language-javascript">   <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_bar_height <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rate <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>scroll_box<span class="token punctuation">.</span>offsetHeight <span class="token operator">-</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token string">'px'</span>
</code></pre>
<pre class=" language-javascript"><code class="language-javascript">   scroll_bar_down <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>disy <span class="token operator">=</span> event<span class="token punctuation">.</span>clientY
      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_bar_move<span class="token punctuation">)</span>
      document<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'mouseup'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_bar_up<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>curspeed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rate
      <span class="token keyword">this</span><span class="token punctuation">.</span>mousestate <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    scroll_bar_move <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span>body<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cursor <span class="token operator">=</span> <span class="token string">'default'</span>
      <span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>disy <span class="token operator">-</span> event<span class="token punctuation">.</span>clientY
      <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>curspeed <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rate
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">0</span>
      <span class="token punctuation">}</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>scroll_box<span class="token punctuation">.</span>offsetHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>page_content<span class="token punctuation">.</span>offsetHeight <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>scroll_box<span class="token punctuation">.</span>offsetHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>page_content<span class="token punctuation">.</span>offsetHeight
      <span class="token punctuation">}</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>page_content_top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">+</span> <span class="token string">'px'</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_bar_top <span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rate <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'px'</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    scroll_bar_up <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      document<span class="token punctuation">.</span><span class="token function">removeEventListener</span><span class="token punctuation">(</span><span class="token string">'mousemove'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_bar_move<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>mousestate <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>这一段代码是滚动条响应鼠标拖拽事件，当鼠标按下的时候记录此时的Y坐标，然后移动鼠标，计算移动距离。<br><strong>注意</strong>： 滚动条移动的距离和鼠标移动的距离相等，而内容移动的距离要除以对应的比率，也就是rate</p>
<pre class=" language-javascript"><code class="language-javascript">   scroll <span class="token punctuation">(</span>event<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>scroll_box<span class="token punctuation">.</span>offsetHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>page_content<span class="token punctuation">.</span>offsetHeight <span class="token operator">&lt;=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>wheelDelta <span class="token operator">===</span> <span class="token number">120</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">+</span><span class="token operator">=</span> <span class="token number">50</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token number">0</span>
          <span class="token punctuation">}</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>page_content_top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">+</span> <span class="token string">'px'</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_bar_top <span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rate <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'px'</span>
        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>event<span class="token punctuation">.</span>wheelDelta <span class="token operator">===</span> <span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">-</span><span class="token operator">=</span> <span class="token number">50</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>scroll_box<span class="token punctuation">.</span>offsetHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>page_content<span class="token punctuation">.</span>offsetHeight <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed<span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>scroll_box<span class="token punctuation">.</span>offsetHeight <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>page_content<span class="token punctuation">.</span>offsetHeight
          <span class="token punctuation">}</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>page_content_top <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">+</span> <span class="token string">'px'</span>
          <span class="token keyword">this</span><span class="token punctuation">.</span>scroll_bar_top <span class="token operator">=</span> <span class="token operator">-</span><span class="token keyword">this</span><span class="token punctuation">.</span>speed <span class="token operator">*</span> <span class="token keyword">this</span><span class="token punctuation">.</span>rate <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'px'</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
</code></pre>
<p>这段代码是滚动条响应鼠标滚动事件，当鼠标滚轮滚动一下，对应滚动条的移动距离，可自行设定。</p>
<p>下面贴出Html代码，仅供参考</p>
<pre class=" language-html"><code class="language-html">   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll_box<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll_box<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_content<span class="token punctuation">"</span></span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">top</span><span class="token punctuation">:</span> page_content_top<span class="token punctuation">}</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_content<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_item<span class="token punctuation">"</span></span> <span class="token attr-name">v-for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>(value, index) in pages<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_wrap<span class="token punctuation">"</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_seledt(index)<span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{border: value.state}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_thumbnail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span>{{index}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value.name<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_tool<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>value.state<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_del<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>page_liked<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>warp_scroll_bar<span class="token punctuation">"</span></span> <span class="token attr-name">v-show</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll_bar_state<span class="token punctuation">"</span></span>  <span class="token attr-name">ref</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll_bar<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scroll_bar<span class="token punctuation">"</span></span> <span class="token attr-name">:</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token punctuation">{</span><span class="token property">top</span><span class="token punctuation">:</span> scroll_bar_top,<span class="token property">height</span><span class="token punctuation">:</span> scroll_bar_height<span class="token punctuation">}</span></span><span class="token punctuation">"</span></span> <span class="token attr-name">:class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>{ready:  mousestate}<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>如果大家有什么意见或建议，请在下方评论区留言</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近由于需求原因，用vue做开发，自己动手模拟原生滚动条,做过之后觉得也没有那么难&lt;br&gt;点击观看&lt;a href=&quot;http://leiyongliang.github.io/scroll&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Demo&lt;/a&gt;&lt;/
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>如何提升阅读效率</title>
    <link href="http://yoursite.com/2017/02/22/%E5%A6%82%E4%BD%95%E6%8F%90%E5%8D%87%E9%98%85%E8%AF%BB%E6%95%88%E7%8E%87/"/>
    <id>http://yoursite.com/2017/02/22/如何提升阅读效率/</id>
    <published>2017-02-22T02:57:03.000Z</published>
    <updated>2017-02-22T03:18:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>提升阅读效率是一个系统工程，不可一蹴而就，要想做到，你至少要在四个方面下功夫：</p>
<p>1.<strong>体力</strong>：体力是精力的保证，高强度的阅读需要强大的精力来支撑；<br>2.<strong>意愿</strong>：为什么读？什么是自己能保持高强度阅读的精神支撑？<br>3.<strong>知识</strong>：有很多比较难的书，要求阅读者必须要有一定的知识基础或者对应学科的知识基础，举个例子，如果你从来没有学过物理和高等数学或者相关基础特别差，却一下子想要高强度高质量地吸收理论力学，泛函分析相关的知识，可能吗？别说书里面的内容了，目录你都看不懂。<br>4.<strong>逻辑</strong>：其实，很多书里面的论证和说明，都是统一的论证模式，比如因果链，比如演绎归纳结合，比如反证，如果你能快速地找出隐含的论证模式，很多时候是可以跳过大段文本直接看结论的。但是：提升阅读的逻辑敏锐度，是在以上123点都做到的前提之下的——阅读时候的逻辑分析能力，是一个因为长期阅读自然而然培养出来的能力，或者说结果。</p>
<p>有的人提到的什么目录法，笔记法，乃至其他的画图法，联想法，默读法，各种花样层出的方法，都不过是<strong>术</strong>而已，真要达到高效阅读，必须要重<strong>道</strong>，道之后，才是术。<br>所有好的学习与阅读方法，最主要的部分不是提升你的学习效率，而是<strong>改变你的心智</strong>，让你因为这个方法，爱上学习和阅读，在此基础上，再是效率的提升。<br>方法是次要的——方法（<strong>术</strong>）和成功没绝对的相关关系，精力，兴趣，基础（<strong>道</strong>）才有。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;提升阅读效率是一个系统工程，不可一蹴而就，要想做到，你至少要在四个方面下功夫：&lt;/p&gt;
&lt;p&gt;1.&lt;strong&gt;体力&lt;/strong&gt;：体力是精力的保证，高强度的阅读需要强大的精力来支撑；&lt;br&gt;2.&lt;strong&gt;意愿&lt;/strong&gt;：为什么读？什么是自己能保持高强度
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>写在年末</title>
    <link href="http://yoursite.com/2017/01/20/%E5%86%99%E5%9C%A8%E5%B9%B4%E6%9C%AB/"/>
    <id>http://yoursite.com/2017/01/20/写在年末/</id>
    <published>2017-01-20T09:08:16.000Z</published>
    <updated>2017-01-20T10:19:19.377Z</updated>
    
    <content type="html"><![CDATA[<p>时光飞逝  当我提笔时已是快要离开的时候了<br>离下班还有12分钟 看了一眼窗外<br>黄昏的夕阳在天边留下一片红晕的晚霞<br>远处的高楼大厦泛着金黄的光<br>惬意 安详</p>
<p>我很感谢我能来到亿图<br>一家不是很大的公司<br>我清楚的记得当我刚去的时候<br>连一个表单页面都写的很艰难<br>不知道什么是API<br>什么是AJAX<br>……<br>所以我就默默的努力<br>其他人六点多就走了<br>我熬到七点<br>老板说<br>走吧<br>明天再来做</p>
<p>在这里<br>我感到很自由<br>没有迟到<br>没有强制加班<br>更多的是自我约束<br>还有好多好多随便吃的零食<br>还有一群可爱友好的小伙伴</p>
<p>有时候遇到难题也会困扰好久<br>思考着 思考着 天就黑了<br>又一天就结束了<br>google还显示着翻阅的资料<br>github又多了一个版本记录</p>
<p>这一年<br>我有成长<br>但是不够努力</p>
<p>还有好多坏习惯没改正<br>其中<br>拖延症是最严重的</p>
<p>呵呵<br>上学时将自己的签名写为<br>雷厉风行 永不言弃 亮丽一生</p>
<p>现在真是惭愧啊</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;时光飞逝  当我提笔时已是快要离开的时候了&lt;br&gt;离下班还有12分钟 看了一眼窗外&lt;br&gt;黄昏的夕阳在天边留下一片红晕的晚霞&lt;br&gt;远处的高楼大厦泛着金黄的光&lt;br&gt;惬意 安详&lt;/p&gt;
&lt;p&gt;我很感谢我能来到亿图&lt;br&gt;一家不是很大的公司&lt;br&gt;我清楚的记得当我刚去的时候&lt;
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title>flex布局总结</title>
    <link href="http://yoursite.com/2017/01/17/flex%E5%B8%83%E5%B1%80%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2017/01/17/flex布局总结/</id>
    <published>2017-01-17T06:47:19.000Z</published>
    <updated>2017-06-09T09:57:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>行内元素也可以使用Flex布局。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>
    <span class="token property">display</span><span class="token punctuation">:</span> inline-flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>注意，设为Flex布局以后，子元素的<font color="red">float、clear</font>和<font color="red">vertical-align</font>属性将失效。</p>
<hr>
<p>采用Flex布局的元素，称为Flex容器（flex container），简称”容器”。它的所有子元素自动成为容器成员，称为Flex项目（flex item），简称”项目”。</p>
<p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；交叉轴的开始位置叫做cross start，结束位置叫做cross end。<br>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p>
<p>容器有如下6个属性：<br>1.flex-direction：属性决定主轴的方向（即项目的排列方向）。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>
    <span class="token property">flex-direction</span><span class="token punctuation">:</span> row | row-reverse | column | column-reverse<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>有如下四个值:</p>
<ul>
<li>row（默认值）：主轴为水平方向，起点在左端。</li>
<li>row-reverse：主轴为水平方向，起点在右端。</li>
<li>column：主轴为垂直方向，起点在上沿。</li>
<li>column-reverse：主轴为垂直方向，起点在下沿。</li>
</ul>
<p>2.flex-wrap: 默认情况下，项目都排在一条线（又称”轴线”）上。flex-wrap属性定义，如果一条轴线排不下，如何换行。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span></span><span class="token punctuation">{</span>
    <span class="token property">flex-wrap</span><span class="token punctuation">:</span> nowrap | wrap | wrap-reverse<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>它可能取三个值:</p>
<ul>
<li>nowrap（默认）：不换行。</li>
<li>wrap：换行，第一行在上方。</li>
<li>wrap-reverse：换行，第一行在下方。</li>
</ul>
<p>3.flex-flow: 该属性是flex-direction属性和flex-wrap属性的简写形式，默认值为row nowrap。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>
    <span class="token property">flex-flow</span><span class="token punctuation">:</span> &lt;flex-direction> || &lt;flex-wrap><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>4.justify-content: 该属性定义了项目在主轴上的对齐方式。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>
    <span class="token property">justify-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>它可能取5个值，具体对齐方式与轴的方向有关。下面假设主轴为从左到右:</p>
<ul>
<li>flex-start（默认值）：左对齐</li>
<li>flex-end：右对齐</li>
<li>center： 居中</li>
<li>space-between：两端对齐，项目之间的间隔都相等。</li>
<li>space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>
</ul>
<p>5.align-items: 该属性定义项目在交叉轴上如何对齐。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>
    <span class="token property">align-items</span><span class="token punctuation">:</span> flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>它可能取5个值。具体的对齐方式与交叉轴的方向有关，下面假设交叉轴从上到下:</p>
<ul>
<li>flex-start：交叉轴的起点对齐。</li>
<li>flex-end：交叉轴的终点对齐。</li>
<li>center：交叉轴的中点对齐。</li>
<li>baseline: 项目的第一行文字的基线对齐。</li>
<li>stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。</li>
</ul>
<p>6.align-content: 该属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.box</span> </span><span class="token punctuation">{</span>
    <span class="token property">align-content</span><span class="token punctuation">:</span> flex-start | flex-end | center | space-between | space-around | stretch<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>该属性可能取6个值:</p>
<ul>
<li>flex-start：与交叉轴的起点对齐。</li>
<li>flex-end：与交叉轴的终点对齐。</li>
<li>center：与交叉轴的中点对齐。</li>
<li>space-between：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>
<li>space-around：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>
<li>stretch（默认值）：轴线占满整个交叉轴。</li>
</ul>
<hr>
<p>项目的属性,以下6个属性设置在项目上:<br>1.order: 定义项目的排列顺序。数值越小，排列越靠前，默认为0。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>
    <span class="token property">order</span><span class="token punctuation">:</span> &lt;integer><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>2.flex-grow: 定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>
    <span class="token property">flex-grow</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* default 0 */</span>
<span class="token punctuation">}</span>
</code></pre>
<p>3.flex-shrink: 定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>
    <span class="token property">flex-shrink</span><span class="token punctuation">:</span> &lt;number><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* default 1 */</span>
<span class="token punctuation">}</span>
</code></pre>
<p>如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。<br>负值对该属性无效。</p>
<p>4.flex-basis: 定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>
    <span class="token property">flex-basis</span><span class="token punctuation">:</span> &lt;length> | auto<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">/* default auto */</span>
<span class="token punctuation">}</span>
</code></pre>
<p>5.flex: 该属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>
    <span class="token property">flex</span><span class="token punctuation">:</span> none | [ &lt;<span class="token string">'flex-grow'</span>> &lt;<span class="token string">'flex-shrink'</span>>? || &lt;<span class="token string">'flex-basis'</span>> ]
<span class="token punctuation">}</span>
</code></pre>
<p>该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</p>
<p>6.align-self: 属性允许单个项目有与其他项目不一样的对齐方式，可覆盖align-items属性。默认值为auto，表示继承父元素的align-items属性，如果没有父元素，则等同于stretch。</p>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.item</span> </span><span class="token punctuation">{</span>
    <span class="token property">align-self</span><span class="token punctuation">:</span> auto | flex-start | flex-end | center | baseline | stretch<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>该属性可能取6个值，除了auto，其他都与align-items属性完全一致。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Flex是Flexible Box的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。任何一个容器都可以指定为Flex布局。&lt;/p&gt;
&lt;pre class=&quot; language-css&quot;&gt;&lt;code class=&quot;language-css&quot;&gt;&lt;span class=&quot;
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>使用Node批量重命名文件</title>
    <link href="http://yoursite.com/2017/01/17/%E6%96%87%E4%BB%B6%E6%89%B9%E9%87%8F%E9%87%8D%E5%91%BD%E5%90%8D/"/>
    <id>http://yoursite.com/2017/01/17/文件批量重命名/</id>
    <published>2017-01-17T06:47:19.000Z</published>
    <updated>2017-06-13T02:33:25.000Z</updated>
    
    <content type="html"><![CDATA[<pre class=" language-javascript"><code class="language-javascript">    <span class="token string">'use strict'</span>
    <span class="token keyword">let</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
    <span class="token keyword">let</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span>

    <span class="token keyword">let</span> pathname <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token string">'./'</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'/test'</span>
    fs<span class="token punctuation">.</span><span class="token function">readdir</span><span class="token punctuation">(</span>pathname<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">,</span> files<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
        files<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>filename<span class="token punctuation">,</span> index<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
            <span class="token keyword">let</span> oldpath <span class="token operator">=</span> pathname <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> filename
            <span class="token keyword">let</span> newpath <span class="token operator">=</span> pathname <span class="token operator">+</span> <span class="token string">'/'</span> <span class="token operator">+</span> index <span class="token operator">+</span> <span class="token string">'.txt'</span>
            fs<span class="token punctuation">.</span><span class="token function">rename</span><span class="token punctuation">(</span>oldpath<span class="token punctuation">,</span> newpath<span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span>
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</code></pre>
]]></content>
    
    <summary type="html">
    
      &lt;pre class=&quot; language-javascript&quot;&gt;&lt;code class=&quot;language-javascript&quot;&gt;    &lt;span class=&quot;token string&quot;&gt;&#39;use strict&#39;&lt;/span&gt;
    &lt;span class=&quot;toke
    
    </summary>
    
    
      <category term="前端" scheme="http://yoursite.com/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>初笔</title>
    <link href="http://yoursite.com/2017/01/16/%E5%88%9D%E7%AC%94/"/>
    <id>http://yoursite.com/2017/01/16/初笔/</id>
    <published>2017-01-16T05:42:38.000Z</published>
    <updated>2017-01-16T10:23:28.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前 总想有一个属于自己的网站<br>用自己的名字来命名</p>
<p>写一些个人简介<br>写一写生活杂谈</p>
<p>终于<br>今天搭建了自己的专属博客<br>以后生活的点点滴滴都将呈现在这里</p>
<p>或许<br>写着 写着<br>我就会变成一个作家<br>这也是不错的</p>
<p>以前从没有写过学习笔记<br>不爱写<br>也没有地方写<br>csdn的博客太丑<br>作为一个前端开发工程师<br>对美观的要求是极致的<br>这个主题还暂算满意</p>
<p>成长的过程中需要不断的积累<br>人说<br>好记性 不如烂笔头<br>此刻<br>我是绚烂的</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前 总想有一个属于自己的网站&lt;br&gt;用自己的名字来命名&lt;/p&gt;
&lt;p&gt;写一些个人简介&lt;br&gt;写一写生活杂谈&lt;/p&gt;
&lt;p&gt;终于&lt;br&gt;今天搭建了自己的专属博客&lt;br&gt;以后生活的点点滴滴都将呈现在这里&lt;/p&gt;
&lt;p&gt;或许&lt;br&gt;写着 写着&lt;br&gt;我就会变成一个作家&lt;br&gt;这
    
    </summary>
    
    
      <category term="随笔" scheme="http://yoursite.com/tags/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
</feed>
